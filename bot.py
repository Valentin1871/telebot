from telegram import (
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update
)
import asyncio

try:
    asyncio.get_event_loop()
except RuntimeError:
    asyncio.set_event_loop(asyncio.new_event_loop())

from telegram.ext import (
    Application, CommandHandler, MessageHandler, ConversationHandler,
    ContextTypes, filters
)
from dotenv import load_dotenv
import os
import json

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —ñ–∑ .env
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")

if not TOKEN:
    raise RuntimeError(
        "Telegram Token –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. "
        "–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ñ–∞–π–ª .env —ñ—Å–Ω—É—î —Ç–∞ –º—ñ—Å—Ç–∏—Ç—å –∑–º—ñ–Ω–Ω—É TELEGRAM_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω"
    )

# –ö—Ä–æ–∫–∏ —Ä–æ–∑–º–æ–≤–∏
ASK_NAME, ASK_LASTNAME, ASK_PHONE, CHOOSE_CAFE, SHOW_MENU_IMAGES, SELECT_MENU, SET_TIME, CONFIRM_ORDER = range(8)

# –ê–¥–º—ñ–Ω–∏
ADMIN_IDS = [443615554]

# –ë–∞–∑–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
USERS_DB = "users.json"
if not os.path.exists(USERS_DB):
    with open(USERS_DB, "w") as f:
        json.dump({}, f)


def is_registered(user_id):
    with open(USERS_DB, "r") as f:
        users = json.load(f)
    return str(user_id) in users


def add_user(user_id, name, last_name, phone):
    with open(USERS_DB, "r") as f:
        users = json.load(f)

    users[str(user_id)] = {
        "name": name,
        "last_name": last_name,
        "phone": phone,
        "last_greet": None
    }

    with open(USERS_DB, "w") as f:
        json.dump(users, f)


# --- –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if is_registered(user_id):
        await update.message.reply_text("–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ! –ü–æ—á–Ω—ñ–º–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
        return await send_cafe_selection(update, context)
    else:
        await update.message.reply_text("–î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É—î–º–æ –≤–∞—Å! –Ø–∫ –≤–∞—Å –∑–≤–∞—Ç–∏?")
        return ASK_NAME


async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–Ø–∫–µ –≤–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ?")
    return ASK_LASTNAME


async def ask_lastname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["last_name"] = update.message.text
    button = KeyboardButton("–ù–∞–¥–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É", request_contact=True)
    reply_markup = ReplyKeyboardMarkup([[button]], one_time_keyboard=True)
    await update.message.reply_text("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=reply_markup)
    return ASK_PHONE


async def ask_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    context.user_data["phone"] = contact.phone_number
    add_user(
        user_id=update.effective_user.id,
        name=context.user_data["name"],
        last_name=context.user_data["last_name"],
        phone=context.user_data["phone"],
    )
    await update.message.reply_text(
        "–î—è–∫—É—î–º–æ! –í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—è.", reply_markup=ReplyKeyboardRemove()
    )

    async def select_cafe(update: Update, context: ContextTypes.DEFAULT_TYPE):
        selected_cafe = update.message.text
        context.user_data["selected_cafe"] = selected_cafe

        await update.message.reply_text(f"–í–∏ –æ–±—Ä–∞–ª–∏ –∫–∞–≤ º—è—Ä–Ω—é: {selected_cafe}. –ó–∞—Ä–∞–∑ –ø–æ–∫–∞–∂–µ–º–æ –º–µ–Ω—é.")
        return SHOW_MENU_IMAGES

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –≤–∏–±–æ—Ä—É –∫–∞–≤'—è—Ä–Ω—ñ
    return await send_cafe_selection(update, context)

# --- –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ---
async def send_cafe_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = ReplyKeyboardMarkup([["–ñ–ö –õ—å–≤—ñ–≤—Å—å–∫–∏–π", "–ñ–ö –ü–µ—Ç—Ä—ñ–≤—Å—å–∫–∏–π"]], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å –∫–∞–≤'—è—Ä–Ω—é –¥–ª—è –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:",
        reply_markup=reply_markup
    )
    return CHOOSE_CAFE

async def show_menu_images(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–¥—Å–∏–ª–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É –∫–∞–≤'—è—Ä–Ω—ñ."""
    menu_photo_1 = "menu1.jpg"
    menu_photo_2 = "menu2.jpg"

    try:
        # –ü–µ—Ä—à–µ —Ñ–æ—Ç–æ
        with open(menu_photo_1, "rb") as photo1:
            await update.message.reply_photo(photo=photo1, caption="–ú–µ–Ω—é")

        # –î—Ä—É–≥–µ —Ñ–æ—Ç–æ
        with open(menu_photo_2, "rb") as photo2:
            await update.message.reply_photo(photo=photo2, caption="–õ—ñ—Ç–Ω—î –º–µ–Ω—é")

        # –ó–∞–ø–∏—Ç –¥–ª—è –≤–∏–±–æ—Ä—É —Å—Ç—Ä–∞–≤–∏
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –±—É–¥—å-—â–æ –∑ –º–µ–Ω—é, —â–æ–± –∑–∞–º–æ–≤–∏—Ç–∏.")
        return SELECT_MENU

    except FileNotFoundError as e:
        await update.message.reply_text(f"–ù–∞ –∂–∞–ª—å, –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –º–µ–Ω—é: {e}")
    except Exception as e:
        await update.message.reply_text(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é: {e}")



async def select_cafe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_order = context.user_data.setdefault("order", {})
    user_order["cafe"] = update.message.text
    await update.message.reply_text("–ù–∞–ø–∏—à—ñ—Ç—å –≤—Å–µ —â–æ —Ö–æ—á–µ—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏:")
    return SELECT_MENU


async def set_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_order = context.user_data["order"]
    user_order["order_details"] = update.message.text
    await update.message.reply_text("–ù–∞ –∫–æ–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è? –ù–∞–ø–∏—à—ñ—Ç—å —á–∞—Å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '15:30') –∞–±–æ '–∑–∞—Ä–∞–∑'.")
    return SET_TIME


async def set_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_order = context.user_data["order"]
    user_order["time"] = update.message.text

    summary = (
        f"Ô∏è–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, —Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –π–æ–≥–æ:\n"
        f"–ö–∞–≤‚Äô—è—Ä–Ω—è: {user_order['cafe']}\n"
        f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: {user_order['order_details']}\n"
        f"–ß–∞—Å: {user_order['time']}\n"
        "–ü—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ –∞–±–æ —Å–∫–∞—Å—É–π—Ç–µ."
    )
    reply_markup = ReplyKeyboardMarkup([["‚úÖ–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", "‚ùå–°–∫–∞—Å—É–≤–∞—Ç–∏"]], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(summary, reply_markup=reply_markup)
    return CONFIRM_ORDER


# –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text == "‚úÖ–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏":
        user_order = context.user_data["order"]
        for admin_id in ADMIN_IDS:
            await context.bot.send_message(
                admin_id,
                f"–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n"
                f"–ö–∞–≤‚Äô—è—Ä–Ω—è: {user_order['cafe']}\n"
                f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è: {user_order['order_details']}\n"
                f"–ß–∞—Å: {user_order['time']}"
            )
        await update.message.reply_text(
            "–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≥–æ—Ç—É—î—Ç—å—Å—è! –î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –≤–∏–±—ñ—Ä! –©–æ–± –∑–∞–º–æ–≤–∏—Ç–∏ —â–µ —Ä–∞–∑, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start.",
            reply_markup=ReplyKeyboardRemove()
        )

        # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ –≥—Ä—É–ø–∏ —Ç–∞ Instagram
        await update.message.reply_text(
            "‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è–î–æ—î–¥–Ω—É–π—Ç–µ—Å—è –¥–æ –Ω–∞—à–∏—Ö –≥—Ä—É–ø —É Telegram, —â–æ–± –±—É—Ç–∏ –≤ –∫—É—Ä—Å—ñ –≤—Å—ñ—Ö –Ω–æ–≤–∏–Ω —ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π:\n"
            "üëâ [–ñ–ö –õ—å–≤—ñ–≤—Å—å–∫–∏–π](https://t.me/+DDh_eTYqz9FhNzNi)\n"
            "üëâ [–ñ–ö –ü–µ—Ç—Ä—ñ–≤—Å—å–∫–∏–π](https://t.me/zakutoksp)\n\n"
            "–¢–∞–∫–æ–∂ –ø—ñ–¥–ø–∏—Å—É–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—Å –≤ Instagram:\n"
            "üì∏ [Instagram –ó–∞–∫—É—Ç–∫–∞](https://www.instagram.com/zakutokkava?igsh=MXZ3NjF0NGp4ejhjNw==)",
            parse_mode="Markdown"
        )
    else:
        await update.message.reply_text("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start —ñ –¥–∞–≤–∞–π –≤—Å–µ –ø–æ –Ω–æ–≤–æ–π –ú—ñ—à–∞.", reply_markup=ReplyKeyboardRemove())

    return ConversationHandler.END


# --- –ó–∞–ø—É—Å–∫ ---
def main():
    app = Application.builder().token(TOKEN).build()

    main_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
            ASK_LASTNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_lastname)],
            ASK_PHONE: [MessageHandler(filters.CONTACT, ask_phone)],
            CHOOSE_CAFE: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_cafe)],
            SHOW_MENU_IMAGES: [MessageHandler(filters.TEXT, show_menu_images)],
            SELECT_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_menu)],
            SET_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_time)],
            CONFIRM_ORDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_order)],
        },
        fallbacks=[],
    )

    app.add_handler(main_handler)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!")
    app.run_polling()


if __name__ == "__main__":
    main()